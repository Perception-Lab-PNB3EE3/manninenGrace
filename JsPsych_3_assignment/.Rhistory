myData <- rnorm (n=50, mean=100, sd=15)
head(myData)
boxplot(newData)
boxplot(myData)
hist(myData)
range(myData)
hist(myData, breaks=seq(55,130), by=5)
hist(myData, breaks=seq(55,130), by=5))
hist(myData, breaks=seq(55,130),by=10))
hist(myData, breaks=seq(55,130,by=10))
hist(myData, breaks=seq(55,145,by=10))
x = 77
newMean <- mean(myData)
newSD <- sd(myData)
(x - newMean)/newSD
qnorm(pnorm(x, mean=newMean, sd=newSd))
qnorm(pnorm(x, mean=newMean, sd=newSD))
fiveNums <- rnorm(5, mean=100, sd=50)
?zscore
fiveNumsZ <- (fivenums-newMean/newSD)
fiveNumsZ <- (fiveNums-newMean/newSD)
qnorm(pnorm(x, mean=newMean, sd=newSD))
fiveNumsZ <- ((fiveNums-newMean)/newSD)
qnorm(pnorm(fiveNUms, mean=newMean, sd=newSD))
qnorm(pnorm(fiveNums, mean=newMean, sd=newSD))
myDataz <- (myData-mean(myData))/sd(newData)
myDataz <- (myData-mean(myData))/sd(myData)
range(myDataz)
hist(myDataZ,breaks=seq(-3,3,by=0.5))
hist(myDataz,breaks=seq(-3,3,by=0.5))
ourProbs <- pnorm(myDataz)
?abline
abline(v=0, h=0.5)
sd(myDataz)
abline(v=-3,-2,-1,0,1,2,3)
abline(v=-3, -2, -1,0,1, 2, 3)
abline(v=-3, v=-2, v=-1, v=0, v=1, v=2, v=3)
?abline
abline(v=-3:3)
mean(myDataz)
plot(ourProbs)
plot(myDataz, ourProbs,
xlab = "Probability"
ylab = "Z-scores")
plot(myDataxz, ourProbs,
ylab = "Probability",
xlab = "Z-scores")
plot(myDataz, ourProbs,
ylab = "Probability",
xlab = "Z-scores")
abline(v=c(-2,-1,0,1,2))
abline(v=c(-2,-1,0,1,2), lty="dashed")
abline(h=0.5)
total_n <- length(myDataz)
total_n <- length(myDataz)
oneSD <- myDataz[myDataz>-1&myData2<1]
oneSD <- myDataz[myDataz>-1&myDataz<1]
twoSD <- myDataz[myDataz>-2&myDataz<2]
three <- myDataz[myDataz>-3&myDataz<3]
n_oneSD <- length(oneSD)
n_twoSD <- length(twoSD)
n_threeSD <- length(threeSD)
threeSD <- myDataz[myDataz>-3&myDataz<3]
n_threeSD <- length(threeSD)
n_oneSD/total_n
n_twoSD/total_n
n_threeSD/total_n
pnorm(1)-pnorm(-1)
pnorm(2)-pnorm(-2)
pnorm(3)-pnorm(-3)
source("https://raw.githubusercontent.com/HashemiScience/2xe3stuff/main/SkillsPractice.R")
mean(data1)
#the mean of data1 is 22.5338
mean(data2)
#finding standard deviation of data1
sd(data1)
#finding standard deviation of data2
sd(data2)
"?"
"variance?"
#finding variance of data1
var(data1)
#finding variance of data2
var(data2)
#finding variance of data1
var(data1)
#histogram of data1
hist(data1)
x <- data1
y <- data2
#plot scatterplot compairing data1 and data2, assess relationship between them
plot(x, y)
#pearsons correlation -> non ranked
pearsons correlation <- cor(x, y)
#pearsons correlation -> non ranked
pearcorr <- cor(x, y)
corr(x, y)
cor(x, y)
#spearmans correlation -> ranked
spearman_correlation <- cor(x, y, method = "spearman")
print(spearman_correlation)
#Convert your Pearson’s correlation coefficient to a regression coefficient of determination.
#pearsons correlation coefficient = r -> regression coefficient of determination R^2
# R^2 = r^2
help.request(squareroot)
#Convert your Pearson’s correlation coefficient to a regression coefficient of determination.
#pearsons correlation coefficient = r -> regression coefficient of determination R^2
# R^2 = r^2
sqrt(0.2336212)
#Convert your Pearson’s correlation coefficient to a regression coefficient of determination.
#pearsons correlation coefficient = r -> regression coefficient of determination R^2
# R^2 = r^2
sqrt(0.2336212)
#Convert your Pearson’s correlation coefficient to a regression coefficient of determination.
#pearsons correlation coefficient = r -> regression coefficient of determination R^2
# R^2 = r^2
(spearman_correlation)^2
#Convert your Pearson’s correlation coefficient to a regression coefficient of determination.
#pearsons correlation coefficient = r -> regression coefficient of determination R^2
# R^2 = r^2
regression coefficient <- (spearman_correlation)^2
#Convert your Pearson’s correlation coefficient to a regression coefficient of determination.
#pearsons correlation coefficient = r -> regression coefficient of determination R^2
# R^2 = r^2
regcoef <- (spearman_correlation)^2
#Convert your Pearson’s correlation coefficient to a regression coefficient of determination.
#pearsons correlation coefficient = r -> regression coefficient of determination R^2
# R^2 = r^2
(spearman_correlation)^2
source("source("https://raw.githubusercontent.com/HashemiScience/2xe3stuff/main/SkillsPractice.R"")
source("https://raw.githubusercontent.com/HashemiScience/2xe3stuff/main/SkillsPractice.R")
head(data1)
head(data2)
mean(data1)
data1mean <- mean(data1)
data2mean <- mean(data2)
data1sd <- sd(data1)
data2sd <- sd(data2)
data1var <- var(data1)
data2var <- var(data2)
hist(data1)
abline(v=mean(data1))
abline(v=mean(data1), col="blue")
abline(v=mean(data1), col="blue", lwd=4)
abline(v=median(data1), col="orange", lwd=3)
abline(v=mode(data1), col="yellow", lwd=2)
abline(v=mode(data1), col="yellow", lwd=2)
abline(v=mode(data1), col="yellow", lwd=2)
plot(data1, data2)
plot(data1, data)
abline(lm(data2 ~ data1))
#saying line of best of data 2 as a function of data 1
cor(data1, data2)
#saying line of best of data 2 as a function of data 1
pearsoncor <- cor(data1, data2)
spearmancor <- cor(data1, data2 = NULL, use = "everything",
method = "spearman")
spearmancor <- cor(data1, data2, method = "spearman")
#calculata R2 = regression coefficient
R2 <- (pearsoncor)^2
summary(lm(data2 ~ data1))
#assesing normality using qqplot
qqnorm(data1)
qqline(data1)
qqnorm(data2)
qqline(data2)
qqplot(data1, data2)
qqline(data1, data2)
#calculating SEMs
data1sem <- data1sd/sqrt(55)
data2sem <- data2sd/sqrt(55)
#calculating SEMs
length(data1)
data1n <- length(data1)
length(data2)
data1n <- length(data2)
#or can use
data1sd/data1n
#90% confidence interval = 5% on left and 5% on right
qnorm(0.05)
#95% confidence interval = 2.5% on left and 2.5% on right
qnorm(0.025)
#to get 95% CI of data1
lowerCI <- data1mean - 1.96*data1sem
#to get 95% CI of data1
(lowerCI <- data1mean - 1.96*data1sem)
# 19.61937
(upperCI <- data1mean + 1.96*data1sem)
#the seed = random number, n
makeMyBarplot(15, 10)
makeMyBarplot(15, 100)
makeMyBarplot(15, 1000)
generate 12 random numbers
head(smartnessdata)
#testing out R
#create a set of data
rnorm(n=100, mean=50, sd=1)
myData <- rnorm(n=100, mean=50, sd=1)
sort(myData)
myDataSort <- sort(myData)
summary(myDataSort)
#min = 47.45, max=52.34, median=49.85, mean=49.82
mean(myData)
#49.81588
mean(myDataSort)
#49.81588
median(myData)
#49.84543
median(myDataSort)
#49.84543
table(myData)
hist(myData)
hist(myDataSort)
range(myData)
#47.44986 52.34038
hist(myData, breaks=seq(45, 55, by=1))
hist(myData, breaks=seq(45, 55, by=1),
col="pink",
border="grey",
ylim=c(0,100))
hist(myData, breaks=seq(45, 55, by=1),
col="pink",
border="grey",
ylim=c(0,50))
boxplot(myData)
firsthalf <- myData[1:50,]
firsthalf <- myData[1:50]
firsthalf <- myDataSort[1:50]
boxplot(firsthalf)
var(myData)
sd(myData)
pnorm(myData)
qqplot(myData)
qqnorm(myData)
qqline(myData)
data[50,]
data[50]
source("https://raw.githubusercontent.com/HashemiScience/2xe3stuff/main/initiateSkillsTest.R")
generateData(400450762, 20240409)
McMasterData <- generateData(400450762, 20240409)
#how many numerical dependent variables
total_n <- length(McMasterData)
#sub18's score
data[18,]
table(McMasterData)
summary(McMasterData)
#sub18's score
data[sub18,]
#sub18's score
data[sub18]
summary(memoryTest)
data[18, memoryTest]
table(memoryTest)
table(McMasterData)
data[18, memoryTest]
data[sub18, memoryTest]
?inspect
?inspect
McMasterData[18,]
McMasterData[sub18,]
McMasterData[18,]
#meandian
mean(faceTest)
#meandian
faceTest <- McMasterData(faceTest)
#meandian
faceTest <- McMasterData[faceTest]
View(McMasterData)
McMasterData[1,]
#meandian
mean(faceData$McMasterData)
#meandian
table(McMasterData)
#meandian
table(faceData)
#histogram
McMasterData(faceData)
#meandian
mean(McMasterData$faceData)
#histogram
McMasterData(faceTest)
#histogram
McMasterData(faceTest)
#meandian
mean(McMasterData$faceTest)
#49.25417
median(McMasterData$faceTest)
meandian <- ((49.25417*46.45)/2)
((49.25417*46.45)/2)
meandian <- ((49.25417+46.45)/2)
((49.25417+46.45)/2)
#histogram
hist(McMasterData$memoryTest)
#histogram
hist(McMasterData$memoryTest, xlab=Memoryscore, main=DistributionMemoryScore)
#histogram
hist(McMasterData$memoryTest, xlab=Memoryscore)
#histogram
hist(McMasterData$memoryTest)
#histogram
histMemoryTest <- hist(McMasterData$memoryTest)
histMemoryTest(xlab="MemoryTest", main="distribution of memory scores")
#histogram
histMemoryTest <- hist(McMasterData$memoryTest)
histMemoryTest(xlab="MemoryTest", main="distribution of memory scores")
#histogram
histMemoryTest <- hist(McMasterData$memoryTest, xlab="MemoryTest", main="distribution of memory scores")
sd(McMasterData$memoryTest)
sd(McMasterData$attentionTest)
#10.69923
Attention <- (McMasterData$attentionTest)
one.5SD <- Attention[Attention>-1.5&Attention<1.5])
one.5SD <- Attention[Attention>-1.5&Attention<1.5]
one.5SD
length(one.5SD)
#10.69923
AttentionTest <- (McMasterData$attentionTest)
AttentionDuration <- (McMasterData$attentionDuration)
plot(AttentionTest, AttentionDuration)
abline(lm(AttentionTest ~ AttentionDuration))
scatterplot1 <- plot(AttentionTest, AttentionDuration)
abline(scatterplot1)
abline(scatterplot1)
abline(lm(AttentionDuration ~ AttentionTest))
coef(lm(AttentionDuration ~ AttentionTest))
mean(McMasterData$age)
mean(McMasterData$faceTest)
age <- mean(McMasterData$age)
faceTest <- mean(McMasterData$faceTest)
agemean <- mean(McMasterData$age)
faceTestmean <- mean(McMasterData$faceTest)
faceTestmean <- mean(McMasterData$faceTest)
memoryTestmean <- mean(McMasterData$memoryTest)
stresstestmean <- mean(McMasterData$stressTest)
#mean of all 4
(agemean + faceTestmean + memoryTestmean + stresstestmean)/4
#mean of all 4
(agemean + faceTestmean + memoryTestmean + stresstestmean)/4
emotionalintel <- (McMasterData$emotionIntel)
sd(emotionalintel)
mean(emotionalintel)
barplot(agemean, faceTestmean, memoryTestmean, stresstestmean)
sample(1:100,10,replace=TRUE)
sample <- c(27, 20, 85, 41, 43, 28, 51, 84, 97, 88)
mean(sample)
median(sample)
range(sample)
var(sample)
sd(sample)
d1 <- 0.11
power.t.test(n = NULL, delta = d1, sd = 1, power = 0.80,
type = "two.sample", alternative = "one.sided")
d1 <- 0.26
power.t.test(n = NULL, delta = d1, sd = 1, power = 0.80,
type = "two.sample", alternative = "one.sided")
n1 <- 183.596
?rnorm
handwritten <- rnorm (n=n1, mean=0, sd=1)
handwritten
laptop <- rnorm (n = n1, mean = 0 - d1, sd = 1)
set.seed(27)
handwritten <- rnorm (n=n1, mean=0, sd=1)
handwritten
laptop <- rnorm (n = n1, mean = 0 - d1, sd = 1)
?t.test
t.test(x = "handwritten", y = "laptop",
alternative = "greater",
mu = 0, paired = FALSE, var.equal = FALSE,
conf.level = 0.95)
set.seed(400450762)
handwritten <- rnorm (n=n1, mean=0, sd=1)
handwritten
laptop <- rnorm (n = n1, mean = 0 - d1, sd = 1)
laptop
laptophandwrittent.test <- t.test (n = n1, d = d1,
sig.level = 0.05, power = 0.80
type = "two.sample", alternative = "greater")
laptophandwrittent.test <- pwr.t.test (n = n1, d = d1,
sig.level = 0.05, power = 0.80
type = "two.sample", alternative = "greater")
laptophandwrittent.test <- pwr.t.test (n = n1, d = d1, sig.level = 0.05, power = 0.80, type = "two.sample", alternative = "greater")
laptophandwrittent.test <- t.test (n = n1, d = d1, sig.level = 0.05, power = 0.80, type = "two.sample", alternative = "greater")
laptophandwrittent.test <- t.test (x = "handwritten", y = "laptop", alternative = "greater", paired = FALSE, conf.level = 0.95)
set.seed(400450762)
handwritten <- rnorm (n=n1, mean=0, sd=1)
handwritten
laptop <- rnorm (n = n1, mean = 0 - d1, sd = 1)
laptop
laptophandwrittent.test <- t.test (x = "handwritten", y = "laptop", alternative = "greater", paired = FALSE, conf.level = 0.95)
t.test (x = "handwritten", y = "laptop", alternative = "greater", paired = FALSE, conf.level = 0.95)
laptophandwrittent.test <- t.test (x = handwritten, y = laptop, alternative = "greater", paired = FALSE, conf.level = 0.95)
laptophandwrittent.test
tablet <- rnorm (n = n1, mean = -0.11, sd = 1)
tablet
tabletandwrittent.test <- t.test (x = handwritten, y = tablet, alternative = "greater", paired = FALSE, conf.level = 0.95)
tabletandwrittent.test
laptopandtablett.test <- t.test (x = tablet, y = laptop, alternative = "greater", paired = FALSE, conf.level = 0.95)
laptopandtablett.test
written-laptop-t.test <- t.test (x = handwritten, y = laptop, alternative = "greater", paired = FALSE, conf.level = 0.95)
written-laptop-t.test
handwritten-laptop-t.test <- t.test (x = handwritten, y = laptop, alternative = "greater", paired = FALSE, conf.level = 0.95)
handwritten-laptop-t.test <- t.test (x = handwritten, y = laptop, alternative = "greater", paired = FALSE, conf.level = 0.95)
handwritten-laptop-t.test <- t.test (x = handwritten, y = laptop, alternative = "greater", paired = FALSE, conf.level = 0.95)
handwrittenlaptopt.test <- t.test (x = handwritten, y = laptop, alternative = "greater", paired = FALSE, conf.level = 0.95)
handwrittenlaptopt.test
handwrittentablett.test <- t.test (x = handwritten, y = tablet, alternative = "greater", paired = FALSE, conf.level = 0.95)
handwrittentablett.test
tabletlaptopt.test <- t.test (x = tablet, y = laptop, alternative = "greater", paired = FALSE, conf.level = 0.95)
tabletlaptopt.test
power.t.test(n = NULL, delta = d1, sd = 1, power = 0.80,
type = "two.sample", alternative = "one.sided")
n1 <- 183.596
set.seed(400450762)
handwritten1 <- rnorm (n=n1, mean=0, sd=1)
handwritten
laptop <- rnorm (n = n1, mean = 0 - d1, sd = 1)
handwritten1 <- rnorm (n=n1, mean=0, sd=1)
handwritten1
laptop1 <- rnorm (n = n1, mean = 0 - d1, sd = 1)
laptop1
handwrittenlaptopt.test <- t.test (x = handwritten1, y = laptop1, alternative = "greater", paired = FALSE, conf.level = 0.95)
handwrittenlaptopt.test
d2 = 0.11
power.t.test(n = NULL, delta = d2, sd = 1, power = 0.80,
type = "two.sample", alternative = "one.sided")
n2 = 1022.587
handwritten2 <- rnorm (n = n2, mean = 0, sd = 1)
tablet2 <- rnorm (n = n2, mean = -0.11, sd = 1)
handwrittentablett.test <- t.test (x = handwritten2, y = tablet2, alternative = "greater", paired = FALSE, conf.level = 0.95)
handwrittentablett.test
d3 = 0.15
power.t.test(n = NULL, delta = d3, sd = 1, power = 0.80,
type = "two.sample", alternative = "one.sided")
n3 = 550.2383
tablet3 <- rnorm (n = n3, mean = -0.11, sd = 1)
laptop3 <- rnorm (n = n3, mean = -0.26, sd = 1)
tabletlaptopt.test <- t.test (x = tablet3, y = laptop3, alternative = "greater", paired = FALSE, conf.level = 0.95)
tabletlaptopt.test
### TUTORIAL 7 - GRACE MANNINEN
Plant <- PlantGrowth
Warp <- warpbreaks
##### Plant Data = NON FACTORIAL
Plant$group <- as.factor(Plant$group)
class(Plant$weight)
Plant$weight <- as.numeric(Plant$weight)
shapiro.test(Plant$weight)
##### Plant Data = NON FACTORIAL
Plant$group <- as.factor(Plant$group)
class(Plant$weight)
Plant$weight <- as.numeric(Plant$weight)
shapiro.test(Plant$weight)
Plantctrl <- Plant$weight[1:10]
Planttrt1 <- Plant$weight[11:20]
Planttrt2 <- Plant$weight[21:30]
aov(weight ~ group, data = Plant)
summary(aov(weight ~ group, data = Plant))
MSEplant <- 58.39
Nplant <- 30
DFplant <- 27
myMeans <- with(Plant, tapply(weight, group, mean))
myMeans
Plantctrl <- Plant$weight[1:10]
Planttrt1 <- Plant$weight[11:20]
Planttrt2 <- Plant$weight[21:30]
aov(weight ~ group, data = Plant)
summary(aov(weight ~ group, data = Plant))
aov(weight ~ group, data = Plant)
aov(weight ~ group, data = Plant)
? git version
?git version
git version ?
git version
<!DOCTYPE html>
setwd("~/Downloads/PNB3EE3/manninenGrace")
setwd("~/Downloads/PNB3EE3/manninenGrace/JsPsych_3_assignment")
data <- read.csv("assignment_dataVis_dataset (1).csv")
View(data)
condition_1 <- data[1: 142, ]
condition_2 <- data[143:284, ]
condition_3 <- data[285:426, ]
condition_4 <- data[427:568, ]
meanx_1 <- mean(condition_1:x)
meanx_1 <- mean(condition_1$x)
meany_1 <- mean(condition_1$y)
print(meanx_1)
print(meany_1)
sdx_1 <- sd(condition_1$x)
sdy_1 <- sd(condition_1$y)
print(sdx_1)
print(sdy_1)
